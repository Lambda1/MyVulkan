原文: https://vulkan-tutorial.com/en/Development_environment#page_Vulkan-SDK

Vulkan SDK
サンプルディレクトリ: Bin
ファイルメモ
	1. glslangValidator.exe: GLSLからバイトコードに変換.
		-> シェーダプログラムをコンパイルして文法チェックが可能.
	2. glslc.exe: GLSLからバイトコードに変換.
		-> Google拡張によるシェーダプログラムの文法チェック.
Vulkanローダ, 検証用レイヤーのバイナリも含まれる.

ライブラリディレクトリ: Lib

GLFW
Vulkanはプラットフォーム依存を避けるため, レンダリング結果を表示するウィンドウ生成機能はない.
ここでは, ネイティブWin32やSDLの代替としてGLFWを使用する.
(GLFWの基本的な使用方法は, https://github.com/lambda1/my_library.git を参照)

GLM
DirectX12とは違い, Vulkanは線形代数ライブラリを持たない.(これは, OpenGLと同様)
ここでは, OpenGLよう線形代数ライブラリを使用する.
(自作した線形代数ライブラリは, https://github.com/lambda1/my_library.git を参照)

Setting Up Visual Studio
* チュートリアルとは違ったVisual Studioの設定を記述する.
* チュートリアルに合わせる場合は, 原文を参照すること.

バージョン
1. visual Studio 2019
2. GLFW3.3.2
3. GLM0.9.9.7

Visual Studio 2019
* 括弧内はお好みで設定.
	1. 空のプロジェクト(C++)
	2. ソースコードにmain.cppを追加
	(2.1 ビルド項目をRelease, x64に変更)
	3. プロジェクト->プロパティ->構成->全ての構成を選択
		3.1. C/C++->全般->追加のインクルードディレクトリを選択
		3.2. glm(.hppがあるディレクトリ), include(GLFWがあるディレクトリ)を設定
		3.3 include(Vulkan SDKがあるディレクトリ)を設定
	4. リンカ->全般->追加のライブラリディレクトリを選択
		4.1 Vulkan/Libを追加
		4.2 GLFW/Libを追加
		(GLMはヘッダオンリーのため, 必要ない)
	5. リンカ->入力->追加の依存ファイルを選択
		5.1 vulkan-1.lib, glfw3.libを記述
	6. C/C++->言語を選択
		5.1 C++言語標準をC++17に設定
		(latestでもOK)
