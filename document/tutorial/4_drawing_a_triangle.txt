原文: https://vulkan-tutorial.com/Drawing_a_triangle

General structure
	プログラムの基本構造:
		1. InitVulkan
			VulkanやGLFWなどの初期化
		2. MainLoop
			メイン処理
		3. CleanUp
			リソース解放

Resouce management
	modern C++では, スマートポインタによってリソース管理を自動化できるが, Vulkanの良い所はミスを避けるための明示的な処理のため, 学習を兼ねて, スマートポインタを使わずにリソース管理を行う.
	チュートリアルでは, 「std::shared_ptr」をオーバーロードしてリソース管理の自動化を実装する.
	大規模なVulkanプログラムでは, RAIIをオススメするが, 学習目的なら何が起きているか把握することを進める.
	(本プログラムでもこの考えに従って実装を進める.)

Integrating GLFW
	GLFWについては学習済みのため, 重要部分のみ触れる.

	1. 全体: #include<vulkan/vulkan.h>を以下に変更(追記するだけでもいけるかも?)
		#define GLFW_INCLUDE_VULKAN
		#include <GLFW/glfw3.h>
		GLFWでは, vulkan.hを自動的にロードする.
	2. InitVulkan(): glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)
		OpenGLコンテキストを生成させない
	3. CleanUp(): glfwの終了処理
		glfwDestroyWindow(), glfwTerminate()

Validation Layers
	Vulkanのデバッグを容易にする機能.
	リソースリークやパラメータ間違えを防ぐ.
	Vulkan実態にはvalidation layerは含まれていないが, LunarG Vulkan SDKに含まれている.
	NDEBUGマクロで管理するのがオススメ.
	基本的にはメッセージ取得関数へのポインタを介して, デバッグ機能の生成と破棄を行う.
	(本開発環境では, PCメーカがドライバ更新をしていないのでこの機能を使えなかった.)

Physical devices and queue families
	Selecting a physical device
		VkInstanceによってVulkanライブラリを初期化後は, グラフィックカードを設定が必要.
		複数のグラフィックカードがある場合は, 任意のモノを選択するようにプログラムを構築すると良い.
		(ここでは, 1つだけ)
	Base device suitability checks
		デバイスの適合度の照会をする.
		VulkanバージョンやGPUドライバ, VR用設定が可能かが確認できる.
		(例えば, VulkanSDKは最新だが, 使用しているグラフィックカードのVulkanAPIが古い場合は, 最新の機能を使えないなど)
		(VulkanAPIのバージョンが1.0.31だったので, validation layerが作動しない原因がここで判明?)
	Queue families
		描画からテクスチャのアップロードに至るまで, Vulkanの操作の大部分はコマンドキューで行う.
		デバイスでサポートしているキューファミリの設定を行う.
		現時点では, グラフィックコマンドをサポートするキューファミリだけを対象.

Logical device and queues
	物理デバイスを選択後, それとインターフェースをとる論理デバイスの設定を行う.
	論理デバイス作成は, インスタンス作成の手順と似ている.
	Specifying the queues to be created
		キューファミリの設定.
	Specifying used device features
		ジオメトリシェーダなどのような, 拡張機能を使用する場合は, ここで設定.
	Creating the logical device
		古い実装と互換性を保つために, レイヤー設定はした方が良い.
	Retrieving queue handles
		キューは論理デバイスと共に作成されるが, それとインターフェースを取るハンドルはない.
		ここでは, グラフィックスキューとハンドルを取るための設定を行う.
