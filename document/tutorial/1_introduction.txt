原文: https://vulkan-tutorial.com

About
1.
VulkanはKhronosグループ(OpenGLの開発)が開発したローレベルAPIであり, 最新のグラフィックカードの抽象化を提供している.
Vulkanのインターフェースを使用するとアプリケーションの振る舞いを正確に記述でき, OpenGLやDirect3Dと比較してパフォーマンスの向上が見込める.
Direct3D12やMetalと比較して, クロスプラットフォーム開発に特化している(Win,Linux,Android).
2.
ただし, パフォーマンスの向上と引き換えに非常に詳細なAPIを使用する必要がある.
特に, フレームバッファ作成やオブジェクトのメモリ管理などのフルスクラッチが必須であり, 動作の担保にはアプリケーションごとに最適化が必要.
3.
つまり, Vulkanは万人向けではないため, 高度なCGや仕事で使うプログラマーを対象としている.
CGよりもゲーム開発がしたいなら, Vulkanよりも(すぐに廃止されることはないので)Direct3DやOpenGLを勉強するべきである.
また, UEやUnityなどのエンジンは内部でVulkanを使用しているのでオススメ.
4.
チュートリアルの条件
  1. Vulkan対応のグラフィックカードとドライバー
  2. C++経験(Resource Acquisition Is Initialization, 初期化リスト)
  3. C++17サポートのコンパイラ
  4. 3DCGの経験
5.
このチュートリアルでは, OpenGLやDirect3Dの知識は必要ないが, 3DCGの基本は知っていることが前提. (例えば, 透視投影変換などの数学知識)
6.
CよりもC++がオススメ(線形代数関係のライブラリを自作する必要がないため)
Rust用のチュートリアルも用意している.
7.
他のプログラミング言語を使用している人のためにC APIを使用する.
ただし, C++を使用するときは, 汚いコーディング作業を抽象化し, 特定のクラスエラー防止に役立つVulkan-Hppをバインディングすることを進める.

E-book
PDF版もあるよ

Tutorial structure
1.
Vulkanの枠組みと画面に三角形を表示するために必要な作業から始める.
  1. まず, 全体の基本的な役割を理解する.
  2. 次に, Vulkan SDKとGLM(OpenGL用線形代数ライブラリ), GLFW(OpenGL用ウィンドウ生成ライブラリ)による開発環境セットアップ
このチュートリアルでは, VisualStudioによるSindows, およびGCCによるUbuntu Linuxでの設定について述べる.
(ここでは, Windowsのみ)
その後, 三角形をレンダリングするために必要なVulkanプログラムの基本部品をすべて実装する.
2.
各章の構造は, 以下の通りである.
  1. 新しいコンセプトと目的の紹介
  2. APIのプログラムへの統合
  3. ヘルパー関数の実装
3.
このサイトでは, 章ごとにVulkanの記事が分割されているが, リファレンスとして扱えるようにするためである.
Vulkanは非常に新しいAPIのため, 仕様自体に欠点を持つ可能性があるため, 何かあれば気軽にKhronosグループにフィードバックを送信することを進める.
4.
Vulkan APIはグラフィックハードウェアを動作させるために, パラメータ設定が冗長な設計になっている.
このため, テクスチャ作成などの基本操作でも多数のステップを毎回繰り返す必要があるため, チュートリアル全体でヘルパー関数の作成を行う.
5.
全ての章の最後にプログラムソースへのリンクを示す.
これらのコードは, 複数のベンダーのグラフィックカードを使用してテスト済みであり, バグや気になることがあればコメントしてね.
6.
Vulkanはできたばかりであり, 最善策というものが存在しないため, みんなで作っていこう.
7.
三角形描画を完了したら, テクスチャや3Dモデルの描画を行うようにプログラムを拡張していく.
8.
他のグラフィックAPIの使用経験がある人は, 三角形が描画されるまでに多くのステップがあることに驚くだろう.
しかし, Vulkanの初期ステップは個々が理解しやすく, 冗長でないことが理解できるはずです.
9.
さあ, 高性能なグラフィックスAPIを使いましょう!
